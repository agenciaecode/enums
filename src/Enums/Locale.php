<?php declare(strict_types=1);

namespace Ecode\Enums;

enum Locale: string implements EnumContract
{
    case AF_NA = 'af_NA';
    case AF_ZA = 'af_ZA';
    case AF = 'af';
    case AK_GH = 'ak_GH';
    case AK = 'ak';
    case SQ_AL = 'sq_AL';
    case SQ = 'sq';
    case AM_ET = 'am_ET';
    case AM = 'am';
    case AR_DZ = 'ar_DZ';
    case AR_BH = 'ar_BH';
    case AR_EG = 'ar_EG';
    case AR_IQ = 'ar_IQ';
    case AR_JO = 'ar_JO';
    case AR_KW = 'ar_KW';
    case AR_LB = 'ar_LB';
    case AR_LY = 'ar_LY';
    case AR_MA = 'ar_MA';
    case AR_OM = 'ar_OM';
    case AR_QA = 'ar_QA';
    case AR_SA = 'ar_SA';
    case AR_SD = 'ar_SD';
    case AR_SY = 'ar_SY';
    case AR_TN = 'ar_TN';
    case AR_AE = 'ar_AE';
    case AR_YE = 'ar_YE';
    case AR = 'ar';
    case HY_AM = 'hy_AM';
    case HY = 'hy';
    case AS_IN = 'as_IN';
    case AS = 'as';
    case ASA_TZ = 'asa_TZ';
    case ASA = 'asa';
    case AZ_CYRL = 'az_Cyrl';
    case AZ_CYRL_AZ = 'az_Cyrl_AZ';
    case AZ_LATN = 'az_Latn';
    case AZ_LATN_AZ = 'az_Latn_AZ';
    case AZ = 'az';
    case BM_ML = 'bm_ML';
    case BM = 'bm';
    case EU_ES = 'eu_ES';
    case EU = 'eu';
    case BE_BY = 'be_BY';
    case BE = 'be';
    case BEM_ZM = 'bem_ZM';
    case BEM = 'bem';
    case BEZ_TZ = 'bez_TZ';
    case BEZ = 'bez';
    case BN_BD = 'bn_BD';
    case BN_IN = 'bn_IN';
    case BN = 'bn';
    case BS_BA = 'bs_BA';
    case BS = 'bs';
    case BG_BG = 'bg_BG';
    case BG = 'bg';
    case MY_MM = 'my_MM';
    case MY = 'my';
    case YUE_HANT_HK = 'yue_Hant_HK';
    case CA_ES = 'ca_ES';
    case CA = 'ca';
    case TZM_LATN = 'tzm_Latn';
    case TZM_LATN_MA = 'tzm_Latn_MA';
    case TZM = 'tzm';
    case CHR_US = 'chr_US';
    case CHR = 'chr';
    case CGG_UG = 'cgg_UG';
    case CGG = 'cgg';
    case ZH_HANS = 'zh_Hans';
    case ZH_HANS_CN = 'zh_Hans_CN';
    case ZH_HANS_HK = 'zh_Hans_HK';
    case ZH_HANS_MO = 'zh_Hans_MO';
    case ZH_HANS_SG = 'zh_Hans_SG';
    case ZH_HANT = 'zh_Hant';
    case ZH_HANT_HK = 'zh_Hant_HK';
    case ZH_HANT_MO = 'zh_Hant_MO';
    case ZH_HANT_TW = 'zh_Hant_TW';
    case ZH = 'zh';
    case KW_GB = 'kw_GB';
    case KW = 'kw';
    case HR_HR = 'hr_HR';
    case HR = 'hr';
    case CS_CZ = 'cs_CZ';
    case CS = 'cs';
    case DA_DK = 'da_DK';
    case DA = 'da';
    case NL_BE = 'nl_BE';
    case NL_NL = 'nl_NL';
    case NL = 'nl';
    case EBU_KE = 'ebu_KE';
    case EBU = 'ebu';
    case EN_AS = 'en_AS';
    case EN_AU = 'en_AU';
    case EN_BE = 'en_BE';
    case EN_BZ = 'en_BZ';
    case EN_BW = 'en_BW';
    case EN_CA = 'en_CA';
    case EN_GU = 'en_GU';
    case EN_HK = 'en_HK';
    case EN_IN = 'en_IN';
    case EN_IE = 'en_IE';
    case EN_IL = 'en_IL';
    case EN_JM = 'en_JM';
    case EN_MT = 'en_MT';
    case EN_MH = 'en_MH';
    case EN_MU = 'en_MU';
    case EN_NA = 'en_NA';
    case EN_NZ = 'en_NZ';
    case EN_MP = 'en_MP';
    case EN_PK = 'en_PK';
    case EN_PH = 'en_PH';
    case EN_SG = 'en_SG';
    case EN_ZA = 'en_ZA';
    case EN_TT = 'en_TT';
    case EN_UM = 'en_UM';
    case EN_VI = 'en_VI';
    case EN_GB = 'en_GB';
    case EN_US = 'en_US';
    case EN_ZW = 'en_ZW';
    case EN = 'en';
    case EO = 'eo';
    case ET_EE = 'et_EE';
    case ET = 'et';
    case EE_GH = 'ee_GH';
    case EE_TG = 'ee_TG';
    case EE = 'ee';
    case FO_FO = 'fo_FO';
    case FO = 'fo';
    case FIL_PH = 'fil_PH';
    case FIL = 'fil';
    case FI_FI = 'fi_FI';
    case FI = 'fi';
    case FR_BE = 'fr_BE';
    case FR_BJ = 'fr_BJ';
    case FR_BF = 'fr_BF';
    case FR_BI = 'fr_BI';
    case FR_CM = 'fr_CM';
    case FR_CA = 'fr_CA';
    case FR_CF = 'fr_CF';
    case FR_TD = 'fr_TD';
    case FR_KM = 'fr_KM';
    case FR_CG = 'fr_CG';
    case FR_CD = 'fr_CD';
    case FR_CI = 'fr_CI';
    case FR_DJ = 'fr_DJ';
    case FR_GQ = 'fr_GQ';
    case FR_FR = 'fr_FR';
    case FR_GA = 'fr_GA';
    case FR_GP = 'fr_GP';
    case FR_GN = 'fr_GN';
    case FR_LU = 'fr_LU';
    case FR_MG = 'fr_MG';
    case FR_ML = 'fr_ML';
    case FR_MQ = 'fr_MQ';
    case FR_MC = 'fr_MC';
    case FR_NE = 'fr_NE';
    case FR_RW = 'fr_RW';
    case FR_RE = 'fr_RE';
    case FR_BL = 'fr_BL';
    case FR_MF = 'fr_MF';
    case FR_SN = 'fr_SN';
    case FR_CH = 'fr_CH';
    case FR_TG = 'fr_TG';
    case FR = 'fr';
    case FF_SN = 'ff_SN';
    case FF = 'ff';
    case GL_ES = 'gl_ES';
    case GL = 'gl';
    case LG_UG = 'lg_UG';
    case LG = 'lg';
    case KA_GE = 'ka_GE';
    case KA = 'ka';
    case DE_AT = 'de_AT';
    case DE_BE = 'de_BE';
    case DE_DE = 'de_DE';
    case DE_LI = 'de_LI';
    case DE_LU = 'de_LU';
    case DE_CH = 'de_CH';
    case DE = 'de';
    case EL_CY = 'el_CY';
    case EL_GR = 'el_GR';
    case EL = 'el';
    case GU_IN = 'gu_IN';
    case GU = 'gu';
    case GUZ_KE = 'guz_KE';
    case GUZ = 'guz';
    case HA_LATN = 'ha_Latn';
    case HA_LATN_GH = 'ha_Latn_GH';
    case HA_LATN_NE = 'ha_Latn_NE';
    case HA_LATN_NG = 'ha_Latn_NG';
    case HA = 'ha';
    case HAW_US = 'haw_US';
    case HAW = 'haw';
    case HE_IL = 'he_IL';
    case HE = 'he';
    case HI_IN = 'hi_IN';
    case HI = 'hi';
    case HU_HU = 'hu_HU';
    case HU = 'hu';
    case IS_IS = 'is_IS';
    case IS = 'is';
    case IG_NG = 'ig_NG';
    case IG = 'ig';
    case ID_ID = 'id_ID';
    case ID = 'id';
    case GA_IE = 'ga_IE';
    case GA = 'ga';
    case IT_IT = 'it_IT';
    case IT_CH = 'it_CH';
    case IT = 'it';
    case JA_JP = 'ja_JP';
    case JA = 'ja';
    case KEA_CV = 'kea_CV';
    case KEA = 'kea';
    case KAB_DZ = 'kab_DZ';
    case KAB = 'kab';
    case KL_GL = 'kl_GL';
    case KL = 'kl';
    case KLN_KE = 'kln_KE';
    case KLN = 'kln';
    case KAM_KE = 'kam_KE';
    case KAM = 'kam';
    case KN_IN = 'kn_IN';
    case KN = 'kn';
    case KK_CYRL = 'kk_Cyrl';
    case KK_CYRL_KZ = 'kk_Cyrl_KZ';
    case KK = 'kk';
    case KM_KH = 'km_KH';
    case KM = 'km';
    case KI_KE = 'ki_KE';
    case KI = 'ki';
    case RW_RW = 'rw_RW';
    case RW = 'rw';
    case KOK_IN = 'kok_IN';
    case KOK = 'kok';
    case KO_KR = 'ko_KR';
    case KO = 'ko';
    case KHQ_ML = 'khq_ML';
    case KHQ = 'khq';
    case SES_ML = 'ses_ML';
    case SES = 'ses';
    case LAG_TZ = 'lag_TZ';
    case LAG = 'lag';
    case LV_LV = 'lv_LV';
    case LV = 'lv';
    case LT_LT = 'lt_LT';
    case LT = 'lt';
    case LUO_KE = 'luo_KE';
    case LUO = 'luo';
    case LUY_KE = 'luy_KE';
    case LUY = 'luy';
    case MK_MK = 'mk_MK';
    case MK = 'mk';
    case JMC_TZ = 'jmc_TZ';
    case JMC = 'jmc';
    case KDE_TZ = 'kde_TZ';
    case KDE = 'kde';
    case MG_MG = 'mg_MG';
    case MG = 'mg';
    case MS_BN = 'ms_BN';
    case MS_MY = 'ms_MY';
    case MS = 'ms';
    case ML_IN = 'ml_IN';
    case ML = 'ml';
    case MT_MT = 'mt_MT';
    case MT = 'mt';
    case GV_GB = 'gv_GB';
    case GV = 'gv';
    case MR_IN = 'mr_IN';
    case MR = 'mr';
    case MAS_KE = 'mas_KE';
    case MAS_TZ = 'mas_TZ';
    case MAS = 'mas';
    case MER_KE = 'mer_KE';
    case MER = 'mer';
    case MFE_MU = 'mfe_MU';
    case MFE = 'mfe';
    case NAQ_NA = 'naq_NA';
    case NAQ = 'naq';
    case NE_IN = 'ne_IN';
    case NE_NP = 'ne_NP';
    case NE = 'ne';
    case ND_ZW = 'nd_ZW';
    case ND = 'nd';
    case NB_NO = 'nb_NO';
    case NB = 'nb';
    case NN_NO = 'nn_NO';
    case NN = 'nn';
    case NYN_UG = 'nyn_UG';
    case NYN = 'nyn';
    case OR_IN = 'or_IN';
    case OR = 'or';
    case OM_ET = 'om_ET';
    case OM_KE = 'om_KE';
    case OM = 'om';
    case PS_AF = 'ps_AF';
    case PS = 'ps';
    case FA_AF = 'fa_AF';
    case FA_IR = 'fa_IR';
    case FA = 'fa';
    case PL_PL = 'pl_PL';
    case PL = 'pl';
    case PT_BR = 'pt_BR';
    case PT_GW = 'pt_GW';
    case PT_MZ = 'pt_MZ';
    case PT_PT = 'pt_PT';
    case PT = 'pt';
    case PA_ARAB = 'pa_Arab';
    case PA_ARAB_PK = 'pa_Arab_PK';
    case PA_GURU = 'pa_Guru';
    case PA_GURU_IN = 'pa_Guru_IN';
    case PA = 'pa';
    case RO_MD = 'ro_MD';
    case RO_RO = 'ro_RO';
    case RO = 'ro';
    case RM_CH = 'rm_CH';
    case RM = 'rm';
    case ROF_TZ = 'rof_TZ';
    case ROF = 'rof';
    case RU_MD = 'ru_MD';
    case RU_RU = 'ru_RU';
    case RU_UA = 'ru_UA';
    case RU = 'ru';
    case RWK_TZ = 'rwk_TZ';
    case RWK = 'rwk';
    case SAQ_KE = 'saq_KE';
    case SAQ = 'saq';
    case SG_CF = 'sg_CF';
    case SG = 'sg';
    case SEH_MZ = 'seh_MZ';
    case SEH = 'seh';
    case SR_CYRL = 'sr_Cyrl';
    case SR_CYRL_BA = 'sr_Cyrl_BA';
    case SR_CYRL_ME = 'sr_Cyrl_ME';
    case SR_CYRL_RS = 'sr_Cyrl_RS';
    case SR_LATN = 'sr_Latn';
    case SR_LATN_BA = 'sr_Latn_BA';
    case SR_LATN_ME = 'sr_Latn_ME';
    case SR_LATN_RS = 'sr_Latn_RS';
    case SR = 'sr';
    case SN_ZW = 'sn_ZW';
    case SN = 'sn';
    case II_CN = 'ii_CN';
    case II = 'ii';
    case SI_LK = 'si_LK';
    case SI = 'si';
    case SK_SK = 'sk_SK';
    case SK = 'sk';
    case SL_SI = 'sl_SI';
    case SL = 'sl';
    case XOG_UG = 'xog_UG';
    case XOG = 'xog';
    case SO_DJ = 'so_DJ';
    case SO_ET = 'so_ET';
    case SO_KE = 'so_KE';
    case SO_SO = 'so_SO';
    case SO = 'so';
    case ES_AR = 'es_AR';
    case ES_BO = 'es_BO';
    case ES_CL = 'es_CL';
    case ES_CO = 'es_CO';
    case ES_CR = 'es_CR';
    case ES_DO = 'es_DO';
    case ES_EC = 'es_EC';
    case ES_SV = 'es_SV';
    case ES_GQ = 'es_GQ';
    case ES_GT = 'es_GT';
    case ES_HN = 'es_HN';
    case ES_419 = 'es_419';
    case ES_MX = 'es_MX';
    case ES_NI = 'es_NI';
    case ES_PA = 'es_PA';
    case ES_PY = 'es_PY';
    case ES_PE = 'es_PE';
    case ES_PR = 'es_PR';
    case ES_ES = 'es_ES';
    case ES_US = 'es_US';
    case ES_UY = 'es_UY';
    case ES_VE = 'es_VE';
    case ES = 'es';
    case SW_KE = 'sw_KE';
    case SW_TZ = 'sw_TZ';
    case SW = 'sw';
    case SV_FI = 'sv_FI';
    case SV_SE = 'sv_SE';
    case SV = 'sv';
    case GSW_CH = 'gsw_CH';
    case GSW = 'gsw';
    case SHI_LATN = 'shi_Latn';
    case SHI_LATN_MA = 'shi_Latn_MA';
    case SHI_TFNG = 'shi_Tfng';
    case SHI_TFNG_MA = 'shi_Tfng_MA';
    case SHI = 'shi';
    case DAV_KE = 'dav_KE';
    case DAV = 'dav';
    case TA_IN = 'ta_IN';
    case TA_LK = 'ta_LK';
    case TA = 'ta';
    case TE_IN = 'te_IN';
    case TE = 'te';
    case TEO_KE = 'teo_KE';
    case TEO_UG = 'teo_UG';
    case TEO = 'teo';
    case TH_TH = 'th_TH';
    case TH = 'th';
    case BO_CN = 'bo_CN';
    case BO_IN = 'bo_IN';
    case BO = 'bo';
    case TI_ER = 'ti_ER';
    case TI_ET = 'ti_ET';
    case TI = 'ti';
    case TO_TO = 'to_TO';
    case TO = 'to';
    case TR_TR = 'tr_TR';
    case TR = 'tr';
    case UK_UA = 'uk_UA';
    case UK = 'uk';
    case UR_IN = 'ur_IN';
    case UR_PK = 'ur_PK';
    case UR = 'ur';
    case UZ_ARAB = 'uz_Arab';
    case UZ_ARAB_AF = 'uz_Arab_AF';
    case UZ_CYRL = 'uz_Cyrl';
    case UZ_CYRL_UZ = 'uz_Cyrl_UZ';
    case UZ_LATN = 'uz_Latn';
    case UZ_LATN_UZ = 'uz_Latn_UZ';
    case UZ = 'uz';
    case VI_VN = 'vi_VN';
    case VI = 'vi';
    case VUN_TZ = 'vun_TZ';
    case VUN = 'vun';
    case CY_GB = 'cy_GB';
    case CY = 'cy';
    case YO_NG = 'yo_NG';
    case YO = 'yo';
    case ZU_ZA = 'zu_ZA';
    case ZU = 'zu';

    /**
     * @return array
     */
    public static function values(): array
    {
        return array_column(
            array: self::cases(),
            column_key: 'value'
        );
    }

    /**
     * @param mixed $value
     * @return ?self
     */
    public static function innFrom(mixed $value): ?self
    {
        if (is_null($value)) return null;
        return self::from($value);
    }

    /**
     * @return string
     */
    public function label(): string
    {
        return self::labels()[$this->value];
    }

    /**
     * @return string[]
     */
    public static function labels(): array
    {
        return [
            self::AF_NA->value => 'Afrikaans (Namibia)',
            self::AF_ZA->value => 'Afrikaans (South Africa)',
            self::AF->value => 'Afrikaans',
            self::AK_GH->value => 'Akan (Ghana)',
            self::AK->value => 'Akan',
            self::SQ_AL->value => 'Albanian (Albania)',
            self::SQ->value => 'Albanian',
            self::AM_ET->value => 'Amharic (Ethiopia)',
            self::AM->value => 'Amharic',
            self::AR_DZ->value => 'Arabic (Algeria)',
            self::AR_BH->value => 'Arabic (Bahrain)',
            self::AR_EG->value => 'Arabic (Egypt)',
            self::AR_IQ->value => 'Arabic (Iraq)',
            self::AR_JO->value => 'Arabic (Jordan)',
            self::AR_KW->value => 'Arabic (Kuwait)',
            self::AR_LB->value => 'Arabic (Lebanon)',
            self::AR_LY->value => 'Arabic (Libya)',
            self::AR_MA->value => 'Arabic (Morocco)',
            self::AR_OM->value => 'Arabic (Oman)',
            self::AR_QA->value => 'Arabic (Qatar)',
            self::AR_SA->value => 'Arabic (Saudi Arabia)',
            self::AR_SD->value => 'Arabic (Sudan)',
            self::AR_SY->value => 'Arabic (Syria)',
            self::AR_TN->value => 'Arabic (Tunisia)',
            self::AR_AE->value => 'Arabic (United Arab Emirates)',
            self::AR_YE->value => 'Arabic (Yemen)',
            self::AR->value => 'Arabic',
            self::HY_AM->value => 'Armenian (Armenia)',
            self::HY->value => 'Armenian',
            self::AS_IN->value => 'Assamese (India)',
            self::AS->value => 'Assamese',
            self::ASA_TZ->value => 'Asu (Tanzania)',
            self::ASA->value => 'Asu',
            self::AZ_CYRL->value => 'Azerbaijani (Cyrillic)',
            self::AZ_CYRL_AZ->value => 'Azerbaijani (Cyrillic, Azerbaijan)',
            self::AZ_LATN->value => 'Azerbaijani (Latin)',
            self::AZ_LATN_AZ->value => 'Azerbaijani (Latin, Azerbaijan)',
            self::AZ->value => 'Azerbaijani',
            self::BM_ML->value => 'Bambara (Mali)',
            self::BM->value => 'Bambara',
            self::EU_ES->value => 'Basque (Spain)',
            self::EU->value => 'Basque',
            self::BE_BY->value => 'Belarusian (Belarus)',
            self::BE->value => 'Belarusian',
            self::BEM_ZM->value => 'Bemba (Zambia)',
            self::BEM->value => 'Bemba',
            self::BEZ_TZ->value => 'Bena (Tanzania)',
            self::BEZ->value => 'Bena',
            self::BN_BD->value => 'Bengali (Bangladesh)',
            self::BN_IN->value => 'Bengali (India)',
            self::BN->value => 'Bengali',
            self::BS_BA->value => 'Bosnian (Bosnia and Herzegovina)',
            self::BS->value => 'Bosnian',
            self::BG_BG->value => 'Bulgarian (Bulgaria)',
            self::BG->value => 'Bulgarian',
            self::MY_MM->value => 'Burmese (Myanmar [Burma])',
            self::MY->value => 'Burmese',
            self::YUE_HANT_HK->value => 'Cantonese (Traditional, Hong Kong SAR China)',
            self::CA_ES->value => 'Catalan (Spain)',
            self::CA->value => 'Catalan',
            self::TZM_LATN->value => 'Central Morocco Tamazight (Latin)',
            self::TZM_LATN_MA->value => 'Central Morocco Tamazight (Latin, Morocco)',
            self::TZM->value => 'Central Morocco Tamazight',
            self::CHR_US->value => 'Cherokee (United States)',
            self::CHR->value => 'Cherokee',
            self::CGG_UG->value => 'Chiga (Uganda)',
            self::CGG->value => 'Chiga',
            self::ZH_HANS->value => 'Chinese (Simplified Han)',
            self::ZH_HANS_CN->value => 'Chinese (Simplified Han, China)',
            self::ZH_HANS_HK->value => 'Chinese (Simplified Han, Hong Kong SAR China)',
            self::ZH_HANS_MO->value => 'Chinese (Simplified Han, Macau SAR China)',
            self::ZH_HANS_SG->value => 'Chinese (Simplified Han, Singapore)',
            self::ZH_HANT->value => 'Chinese (Traditional Han)',
            self::ZH_HANT_HK->value => 'Chinese (Traditional Han, Hong Kong SAR China)',
            self::ZH_HANT_MO->value => 'Chinese (Traditional Han, Macau SAR China)',
            self::ZH_HANT_TW->value => 'Chinese (Traditional Han, Taiwan)',
            self::ZH->value => 'Chinese',
            self::KW_GB->value => 'Cornish (United Kingdom)',
            self::KW->value => 'Cornish',
            self::HR_HR->value => 'Croatian (Croatia)',
            self::HR->value => 'Croatian',
            self::CS_CZ->value => 'Czech (Czech Republic)',
            self::CS->value => 'Czech',
            self::DA_DK->value => 'Danish (Denmark)',
            self::DA->value => 'Danish',
            self::NL_BE->value => 'Dutch (Belgium)',
            self::NL_NL->value => 'Dutch (Netherlands)',
            self::NL->value => 'Dutch',
            self::EBU_KE->value => 'Embu (Kenya)',
            self::EBU->value => 'Embu',
            self::EN_AS->value => 'English (American Samoa)',
            self::EN_AU->value => 'English (Australia)',
            self::EN_BE->value => 'English (Belgium)',
            self::EN_BZ->value => 'English (Belize)',
            self::EN_BW->value => 'English (Botswana)',
            self::EN_CA->value => 'English (Canada)',
            self::EN_GU->value => 'English (Guam)',
            self::EN_HK->value => 'English (Hong Kong SAR China)',
            self::EN_IN->value => 'English (India)',
            self::EN_IE->value => 'English (Ireland)',
            self::EN_IL->value => 'English (Israel)',
            self::EN_JM->value => 'English (Jamaica)',
            self::EN_MT->value => 'English (Malta)',
            self::EN_MH->value => 'English (Marshall Islands)',
            self::EN_MU->value => 'English (Mauritius)',
            self::EN_NA->value => 'English (Namibia)',
            self::EN_NZ->value => 'English (New Zealand)',
            self::EN_MP->value => 'English (Northern Mariana Islands)',
            self::EN_PK->value => 'English (Pakistan)',
            self::EN_PH->value => 'English (Philippines)',
            self::EN_SG->value => 'English (Singapore)',
            self::EN_ZA->value => 'English (South Africa)',
            self::EN_TT->value => 'English (Trinidad and Tobago)',
            self::EN_UM->value => 'English (U.S. Minor Outlying Islands)',
            self::EN_VI->value => 'English (U.S. Virgin Islands)',
            self::EN_GB->value => 'English (United Kingdom)',
            self::EN_US->value => 'English (United States)',
            self::EN_ZW->value => 'English (Zimbabwe)',
            self::EN->value => 'English',
            self::EO->value => 'Esperanto',
            self::ET_EE->value => 'Estonian (Estonia)',
            self::ET->value => 'Estonian',
            self::EE_GH->value => 'Ewe (Ghana)',
            self::EE_TG->value => 'Ewe (Togo)',
            self::EE->value => 'Ewe',
            self::FO_FO->value => 'Faroese (Faroe Islands)',
            self::FO->value => 'Faroese',
            self::FIL_PH->value => 'Filipino (Philippines)',
            self::FIL->value => 'Filipino',
            self::FI_FI->value => 'Finnish (Finland)',
            self::FI->value => 'Finnish',
            self::FR_BE->value => 'French (Belgium)',
            self::FR_BJ->value => 'French (Benin)',
            self::FR_BF->value => 'French (Burkina Faso)',
            self::FR_BI->value => 'French (Burundi)',
            self::FR_CM->value => 'French (Cameroon)',
            self::FR_CA->value => 'French (Canada)',
            self::FR_CF->value => 'French (Central African Republic)',
            self::FR_TD->value => 'French (Chad)',
            self::FR_KM->value => 'French (Comoros)',
            self::FR_CG->value => 'French (Congo - Brazzaville)',
            self::FR_CD->value => 'French (Congo - Kinshasa)',
            self::FR_CI->value => 'French (Côte d\'Ivoire)',
            self::FR_DJ->value => 'French (Djibouti)',
            self::FR_GQ->value => 'French (Equatorial Guinea)',
            self::FR_FR->value => 'French (France)',
            self::FR_GA->value => 'French (Gabon)',
            self::FR_GP->value => 'French (Guadeloupe)',
            self::FR_GN->value => 'French (Guinea)',
            self::FR_LU->value => 'French (Luxembourg)',
            self::FR_MG->value => 'French (Madagascar)',
            self::FR_ML->value => 'French (Mali)',
            self::FR_MQ->value => 'French (Martinique)',
            self::FR_MC->value => 'French (Monaco)',
            self::FR_NE->value => 'French (Niger)',
            self::FR_RW->value => 'French (Rwanda)',
            self::FR_RE->value => 'French (Réunion)',
            self::FR_BL->value => 'French (Saint Barthélemy)',
            self::FR_MF->value => 'French (Saint Martin)',
            self::FR_SN->value => 'French (Senegal)',
            self::FR_CH->value => 'French (Switzerland)',
            self::FR_TG->value => 'French (Togo)',
            self::FR->value => 'French',
            self::FF_SN->value => 'Fulah (Senegal)',
            self::FF->value => 'Fulah',
            self::GL_ES->value => 'Galician (Spain)',
            self::GL->value => 'Galician',
            self::LG_UG->value => 'Ganda (Uganda)',
            self::LG->value => 'Ganda',
            self::KA_GE->value => 'Georgian (Georgia)',
            self::KA->value => 'Georgian',
            self::DE_AT->value => 'German (Austria)',
            self::DE_BE->value => 'German (Belgium)',
            self::DE_DE->value => 'German (Germany)',
            self::DE_LI->value => 'German (Liechtenstein)',
            self::DE_LU->value => 'German (Luxembourg)',
            self::DE_CH->value => 'German (Switzerland)',
            self::DE->value => 'German',
            self::EL_CY->value => 'Greek (Cyprus)',
            self::EL_GR->value => 'Greek (Greece)',
            self::EL->value => 'Greek',
            self::GU_IN->value => 'Gujarati (India)',
            self::GU->value => 'Gujarati',
            self::GUZ_KE->value => 'Gusii (Kenya)',
            self::GUZ->value => 'Gusii',
            self::HA_LATN->value => 'Hausa (Latin)',
            self::HA_LATN_GH->value => 'Hausa (Latin, Ghana)',
            self::HA_LATN_NE->value => 'Hausa (Latin, Niger)',
            self::HA_LATN_NG->value => 'Hausa (Latin, Nigeria)',
            self::HA->value => 'Hausa',
            self::HAW_US->value => 'Hawaiian (United States)',
            self::HAW->value => 'Hawaiian',
            self::HE_IL->value => 'Hebrew (Israel)',
            self::HE->value => 'Hebrew',
            self::HI_IN->value => 'Hindi (India)',
            self::HI->value => 'Hindi',
            self::HU_HU->value => 'Hungarian (Hungary)',
            self::HU->value => 'Hungarian',
            self::IS_IS->value => 'Icelandic (Iceland)',
            self::IS->value => 'Icelandic',
            self::IG_NG->value => 'Igbo (Nigeria)',
            self::IG->value => 'Igbo',
            self::ID_ID->value => 'Indonesian (Indonesia)',
            self::ID->value => 'Indonesian',
            self::GA_IE->value => 'Irish (Ireland)',
            self::GA->value => 'Irish',
            self::IT_IT->value => 'Italian (Italy)',
            self::IT_CH->value => 'Italian (Switzerland)',
            self::IT->value => 'Italian',
            self::JA_JP->value => 'Japanese (Japan)',
            self::JA->value => 'Japanese',
            self::KEA_CV->value => 'Kabuverdianu (Cape Verde)',
            self::KEA->value => 'Kabuverdianu',
            self::KAB_DZ->value => 'Kabyle (Algeria)',
            self::KAB->value => 'Kabyle',
            self::KL_GL->value => 'Kalaallisut (Greenland)',
            self::KL->value => 'Kalaallisut',
            self::KLN_KE->value => 'Kalenjin (Kenya)',
            self::KLN->value => 'Kalenjin',
            self::KAM_KE->value => 'Kamba (Kenya)',
            self::KAM->value => 'Kamba',
            self::KN_IN->value => 'Kannada (India)',
            self::KN->value => 'Kannada',
            self::KK_CYRL->value => 'Kazakh (Cyrillic)',
            self::KK_CYRL_KZ->value => 'Kazakh (Cyrillic, Kazakhstan)',
            self::KK->value => 'Kazakh',
            self::KM_KH->value => 'Khmer (Cambodia)',
            self::KM->value => 'Khmer',
            self::KI_KE->value => 'Kikuyu (Kenya)',
            self::KI->value => 'Kikuyu',
            self::RW_RW->value => 'Kinyarwanda (Rwanda)',
            self::RW->value => 'Kinyarwanda',
            self::KOK_IN->value => 'Konkani (India)',
            self::KOK->value => 'Konkani',
            self::KO_KR->value => 'Korean (South Korea)',
            self::KO->value => 'Korean',
            self::KHQ_ML->value => 'Koyra Chiini (Mali)',
            self::KHQ->value => 'Koyra Chiini',
            self::SES_ML->value => 'Koyraboro Senni (Mali)',
            self::SES->value => 'Koyraboro Senni',
            self::LAG_TZ->value => 'Langi (Tanzania)',
            self::LAG->value => 'Langi',
            self::LV_LV->value => 'Latvian (Latvia)',
            self::LV->value => 'Latvian',
            self::LT_LT->value => 'Lithuanian (Lithuania)',
            self::LT->value => 'Lithuanian',
            self::LUO_KE->value => 'Luo (Kenya)',
            self::LUO->value => 'Luo',
            self::LUY_KE->value => 'Luyia (Kenya)',
            self::LUY->value => 'Luyia',
            self::MK_MK->value => 'Macedonian (Macedonia)',
            self::MK->value => 'Macedonian',
            self::JMC_TZ->value => 'Machame (Tanzania)',
            self::JMC->value => 'Machame',
            self::KDE_TZ->value => 'Makonde (Tanzania)',
            self::KDE->value => 'Makonde',
            self::MG_MG->value => 'Malagasy (Madagascar)',
            self::MG->value => 'Malagasy',
            self::MS_BN->value => 'Malay (Brunei)',
            self::MS_MY->value => 'Malay (Malaysia)',
            self::MS->value => 'Malay',
            self::ML_IN->value => 'Malayalam (India)',
            self::ML->value => 'Malayalam',
            self::MT_MT->value => 'Maltese (Malta)',
            self::MT->value => 'Maltese',
            self::GV_GB->value => 'Manx (United Kingdom)',
            self::GV->value => 'Manx',
            self::MR_IN->value => 'Marathi (India)',
            self::MR->value => 'Marathi',
            self::MAS_KE->value => 'Masai (Kenya)',
            self::MAS_TZ->value => 'Masai (Tanzania)',
            self::MAS->value => 'Masai',
            self::MER_KE->value => 'Meru (Kenya)',
            self::MER->value => 'Meru',
            self::MFE_MU->value => 'Morisyen (Mauritius)',
            self::MFE->value => 'Morisyen',
            self::NAQ_NA->value => 'Nama (Namibia)',
            self::NAQ->value => 'Nama',
            self::NE_IN->value => 'Nepali (India)',
            self::NE_NP->value => 'Nepali (Nepal)',
            self::NE->value => 'Nepali',
            self::ND_ZW->value => 'North Ndebele (Zimbabwe)',
            self::ND->value => 'North Ndebele',
            self::NB_NO->value => 'Norwegian Bokmål (Norway)',
            self::NB->value => 'Norwegian Bokmål',
            self::NN_NO->value => 'Norwegian Nynorsk (Norway)',
            self::NN->value => 'Norwegian Nynorsk',
            self::NYN_UG->value => 'Nyankole (Uganda)',
            self::NYN->value => 'Nyankole',
            self::OR_IN->value => 'Oriya (India)',
            self::OR->value => 'Oriya',
            self::OM_ET->value => 'Oromo (Ethiopia)',
            self::OM_KE->value => 'Oromo (Kenya)',
            self::OM->value => 'Oromo',
            self::PS_AF->value => 'Pashto (Afghanistan)',
            self::PS->value => 'Pashto',
            self::FA_AF->value => 'Persian (Afghanistan)',
            self::FA_IR->value => 'Persian (Iran)',
            self::FA->value => 'Persian',
            self::PL_PL->value => 'Polish (Poland)',
            self::PL->value => 'Polish',
            self::PT_BR->value => 'Portuguese (Brazil)',
            self::PT_GW->value => 'Portuguese (Guinea-Bissau)',
            self::PT_MZ->value => 'Portuguese (Mozambique)',
            self::PT_PT->value => 'Portuguese (Portugal)',
            self::PT->value => 'Portuguese',
            self::PA_ARAB->value => 'Punjabi (Arabic)',
            self::PA_ARAB_PK->value => 'Punjabi (Arabic, Pakistan)',
            self::PA_GURU->value => 'Punjabi (Gurmukhi)',
            self::PA_GURU_IN->value => 'Punjabi (Gurmukhi, India)',
            self::PA->value => 'Punjabi',
            self::RO_MD->value => 'Romanian (Moldova)',
            self::RO_RO->value => 'Romanian (Romania)',
            self::RO->value => 'Romanian',
            self::RM_CH->value => 'Romansh (Switzerland)',
            self::RM->value => 'Romansh',
            self::ROF_TZ->value => 'Rombo (Tanzania)',
            self::ROF->value => 'Rombo',
            self::RU_MD->value => 'Russian (Moldova)',
            self::RU_RU->value => 'Russian (Russia)',
            self::RU_UA->value => 'Russian (Ukraine)',
            self::RU->value => 'Russian',
            self::RWK_TZ->value => 'Rwa (Tanzania)',
            self::RWK->value => 'Rwa',
            self::SAQ_KE->value => 'Samburu (Kenya)',
            self::SAQ->value => 'Samburu',
            self::SG_CF->value => 'Sango (Central African Republic)',
            self::SG->value => 'Sango',
            self::SEH_MZ->value => 'Sena (Mozambique)',
            self::SEH->value => 'Sena',
            self::SR_CYRL->value => 'Serbian (Cyrillic)',
            self::SR_CYRL_BA->value => 'Serbian (Cyrillic, Bosnia and Herzegovina)',
            self::SR_CYRL_ME->value => 'Serbian (Cyrillic, Montenegro)',
            self::SR_CYRL_RS->value => 'Serbian (Cyrillic, Serbia)',
            self::SR_LATN->value => 'Serbian (Latin)',
            self::SR_LATN_BA->value => 'Serbian (Latin, Bosnia and Herzegovina)',
            self::SR_LATN_ME->value => 'Serbian (Latin, Montenegro)',
            self::SR_LATN_RS->value => 'Serbian (Latin, Serbia)',
            self::SR->value => 'Serbian',
            self::SN_ZW->value => 'Shona (Zimbabwe)',
            self::SN->value => 'Shona',
            self::II_CN->value => 'Sichuan Yi (China)',
            self::II->value => 'Sichuan Yi',
            self::SI_LK->value => 'Sinhala (Sri Lanka)',
            self::SI->value => 'Sinhala',
            self::SK_SK->value => 'Slovak (Slovakia)',
            self::SK->value => 'Slovak',
            self::SL_SI->value => 'Slovenian (Slovenia)',
            self::SL->value => 'Slovenian',
            self::XOG_UG->value => 'Soga (Uganda)',
            self::XOG->value => 'Soga',
            self::SO_DJ->value => 'Somali (Djibouti)',
            self::SO_ET->value => 'Somali (Ethiopia)',
            self::SO_KE->value => 'Somali (Kenya)',
            self::SO_SO->value => 'Somali (Somalia)',
            self::SO->value => 'Somali',
            self::ES_AR->value => 'Spanish (Argentina)',
            self::ES_BO->value => 'Spanish (Bolivia)',
            self::ES_CL->value => 'Spanish (Chile)',
            self::ES_CO->value => 'Spanish (Colombia)',
            self::ES_CR->value => 'Spanish (Costa Rica)',
            self::ES_DO->value => 'Spanish (Dominican Republic)',
            self::ES_EC->value => 'Spanish (Ecuador)',
            self::ES_SV->value => 'Spanish (El Salvador)',
            self::ES_GQ->value => 'Spanish (Equatorial Guinea)',
            self::ES_GT->value => 'Spanish (Guatemala)',
            self::ES_HN->value => 'Spanish (Honduras)',
            self::ES_419->value => 'Spanish (Latin America)',
            self::ES_MX->value => 'Spanish (Mexico)',
            self::ES_NI->value => 'Spanish (Nicaragua)',
            self::ES_PA->value => 'Spanish (Panama)',
            self::ES_PY->value => 'Spanish (Paraguay)',
            self::ES_PE->value => 'Spanish (Peru)',
            self::ES_PR->value => 'Spanish (Puerto Rico)',
            self::ES_ES->value => 'Spanish (Spain)',
            self::ES_US->value => 'Spanish (United States)',
            self::ES_UY->value => 'Spanish (Uruguay)',
            self::ES_VE->value => 'Spanish (Venezuela)',
            self::ES->value => 'Spanish',
            self::SW_KE->value => 'Swahili (Kenya)',
            self::SW_TZ->value => 'Swahili (Tanzania)',
            self::SW->value => 'Swahili',
            self::SV_FI->value => 'Swedish (Finland)',
            self::SV_SE->value => 'Swedish (Sweden)',
            self::SV->value => 'Swedish',
            self::GSW_CH->value => 'Swiss German (Switzerland)',
            self::GSW->value => 'Swiss German',
            self::SHI_LATN->value => 'Tachelhit (Latin)',
            self::SHI_LATN_MA->value => 'Tachelhit (Latin, Morocco)',
            self::SHI_TFNG->value => 'Tachelhit (Tifinagh)',
            self::SHI_TFNG_MA->value => 'Tachelhit (Tifinagh, Morocco)',
            self::SHI->value => 'Tachelhit',
            self::DAV_KE->value => 'Taita (Kenya)',
            self::DAV->value => 'Taita',
            self::TA_IN->value => 'Tamil (India)',
            self::TA_LK->value => 'Tamil (Sri Lanka)',
            self::TA->value => 'Tamil',
            self::TE_IN->value => 'Telugu (India)',
            self::TE->value => 'Telugu',
            self::TEO_KE->value => 'Teso (Kenya)',
            self::TEO_UG->value => 'Teso (Uganda)',
            self::TEO->value => 'Teso',
            self::TH_TH->value => 'Thai (Thailand)',
            self::TH->value => 'Thai',
            self::BO_CN->value => 'Tibetan (China)',
            self::BO_IN->value => 'Tibetan (India)',
            self::BO->value => 'Tibetan',
            self::TI_ER->value => 'Tigrinya (Eritrea)',
            self::TI_ET->value => 'Tigrinya (Ethiopia)',
            self::TI->value => 'Tigrinya',
            self::TO_TO->value => 'Tonga (Tonga)',
            self::TO->value => 'Tonga',
            self::TR_TR->value => 'Turkish (Turkey)',
            self::TR->value => 'Turkish',
            self::UK_UA->value => 'Ukrainian (Ukraine)',
            self::UK->value => 'Ukrainian',
            self::UR_IN->value => 'Urdu (India)',
            self::UR_PK->value => 'Urdu (Pakistan)',
            self::UR->value => 'Urdu',
            self::UZ_ARAB->value => 'Uzbek (Arabic)',
            self::UZ_ARAB_AF->value => 'Uzbek (Arabic, Afghanistan)',
            self::UZ_CYRL->value => 'Uzbek (Cyrillic)',
            self::UZ_CYRL_UZ->value => 'Uzbek (Cyrillic, Uzbekistan)',
            self::UZ_LATN->value => 'Uzbek (Latin)',
            self::UZ_LATN_UZ->value => 'Uzbek (Latin, Uzbekistan)',
            self::UZ->value => 'Uzbek',
            self::VI_VN->value => 'Vietnamese (Vietnam)',
            self::VI->value => 'Vietnamese',
            self::VUN_TZ->value => 'Vunjo (Tanzania)',
            self::VUN->value => 'Vunjo',
            self::CY_GB->value => 'Welsh (United Kingdom)',
            self::CY->value => 'Welsh',
            self::YO_NG->value => 'Yoruba (Nigeria)',
            self::YO->value => 'Yoruba',
            self::ZU_ZA->value => 'Zulu (South Africa)',
            self::ZU->value => 'Zulu',
        ];
    }
}
